set background=dark
set autoindent
set ruler
set showcmd
set incsearch
set autowriteall
set autoread
set foldminlines=1
set shiftwidth=2
set softtabstop=2
" set showtabline=2
set expandtab
set textwidth=78 wrap
set nohlsearch
set foldexpr=indent(v:lnum)
set foldmethod=expr

" I hate backups!
set nobackup
set nowritebackup
set noswapfile

syntax on

" begin freebsd needs
set backspace=indent,eol,start
" end freebsd needs




function! haskell:module()
  let s                      =  expand('%:.:r:gs?/?.?')
  call append(".", "module " . s . " where")
endfunction

function! haskell:line_fill(beg, mid, end)
  if strlen(a:beg) <= 27 && strlen(a:mid) <= 2 && strlen(a:end) <= 46
    let pad_beg              =  a:beg . repeat(" ", 27 - strlen(a:beg))
    let pad_mid              =  repeat(" ", 3 - strlen(a:mid)) . a:mid . "  "
    call setline(".", pad_beg . pad_mid . a:end)
  endif
endfunction

function! haskell:align()
  let leading                =  '^( *[^ ]+( +[^ ]+)*) +'
  let trailing               =  ' +([^ ]+( +[^ ]+)*) *$'
  let defines_pat            =  '\v' . leading . '(\=|\<-)' . trailing
  let signature_pat          =  '\v' . leading .   '(::)'   . trailing
  let case_pat               =  '\v' . leading .  '(-\>)'   . trailing
  let text                   =  getline(".")
  let defines                =  matchlist(text, defines_pat)
  if text !~ '\v^ *--'
    if ! empty(defines)
      call haskell:line_fill(defines[1], defines[3], defines[4])
    else
      let signature          =  matchlist(text, signature_pat)
      if ! empty(signature)
        call haskell:line_fill(signature[1], signature[3], signature[4])
      else
        let case             =  matchlist(text, case_pat)
        if ! empty(case)
          " Ignore '->' when in data definitions and multi-line type signatures.
          if text !~ '\v^ +(-\>|::|\=\>|\=|\|)'
            call haskell:line_fill(case[1], case[3], case[4])
          endif
        endif
      endif
    endif
  endif
endfunction

function! haskell:align_all()
  let a                      =  line(".")
  let b                      =  col(".")
  % call haskell:align()
  call cursor(a, b)
endfunction

function! haskell:comment_horizontal_rule(which)
  let text                   =  system("yes ' -' | sed '38 q' | tr -d '\n'")
  if a:which == "begin"
    call append(".", "{-" . text)
  else
    call append(".", text . " -}")
  endif
endfunction

function! haskell:comment_haddock_either(char)
  call setline(".", "{-" . a:char . " ")
  call cursor(line("."), 4, 1)
  call append(".", " -}")
endfunction

function! haskell:comment_haddock()
  let nothing                =  '\v^ *$'
  if getline(".") =~ nothing
    if getline(line(".") - 1) =~ nothing 
      let char               =  "|"
    else
      let char               =  "^"
    endif
    call haskell:comment_haddock_either(char)
  endif
endfunction

function! haskell:comment_block()
  call haskell:comment_horizontal_rule("end")
  call append(".", "  ")
  call haskell:comment_horizontal_rule("begin")
  normal 2j
  normal 3|
endfunction

command! -nargs=+ -complete=custom,haskell:complete HS
\ :silent! call haskell:dispatch("<args>")<CR>

function! haskell:complete(A,C,P)
  return join(keys(g:HS), "\n")
endfunction
 
function! haskell:dispatch(which)
  call g:HS[a:which]()
endfunction

let HS =
\ { "align all" : function("haskell:align_all")
\ , "haddock comment block" : function("haskell:comment_haddock")
\ , "module header" : function("haskell:module")
\ , "block comment" : function("haskell:comment_block")
\ }




function! cabal:align()
  let matches                =  matchlist(getline("."), '\v(^.+):( +)(.+)$')
  let diff                   =  18 - strlen(matches[1])
  if diff > 0 
    call setline(".", matches[1] . repeat(" ", diff) . ": " . matches[3])
  endif
endfunction

function! cabal:align_all()
  let a                      =  line(".")
  let b                      =  col(".")
  % call cabal:align()
  call cursor(a, b)
endfunction

command! -nargs=+ -complete=custom,cabal:complete CABAL
\ :silent! call cabal:dispatch("<args>")<CR>

function! cabal:complete(A,C,P)
  return join(keys(g:CABAL), "\n")
endfunction
 
function! cabal:dispatch(which)
  call g:CABAL[a:which]()
endfunction

let CABAL =
\ { "align all" : function("cabal:align_all")
\ }




function! readme:general_header(underline_char)
  let matches = matchlist(getline("."), '\v[\t ]*(.+)([^\t ])[\t ]*$')
  let width                  =  eval("&tw")
  let s                      =  matches[1] . matches[2]
  let padding                =  width - strlen(s)
  call setline(".", "")
  normal o
  call setline(".", repeat(" ", padding) . s)
  normal o
  call setline(".", "   " . repeat(a:underline_char, width - 2))
  normal o
  call setline(".", "")
  normal 2o
  normal 2k 
endfunction

function! readme:header()
  call readme:general_header("-")
endfunction

function! readme:codez()
  let width                  =  eval("&tw")
  let top                    =  "ˋ" . repeat(" ", width) . "ˊ"
  let bot                    =  "ˏ" . repeat(" ", width) . "ˎ"
  normal o
  call setline(".", top) 
  normal 4o
  call setline(".", bot) 
  normal 3k 
endfunction

command! -nargs=+ -complete=custom,readme:complete README
\ :silent! call readme:dispatch("<args>")<CR>

function! readme:complete(A,C,P)
  return join(keys(g:README), "\n")
endfunction
 
function! readme:dispatch(which)
  call g:README[a:which]()
endfunction

let README =
\ { "header" : function("readme:header")
\ , "codez" : function("readme:codez")
\ }




function! email:cure_google_date()
  let text = matchlist(getline("."), '\v.+, .+ ([^ ]+) wrote:$')
  . ! sed -r 's/^On ([^,]+, [^,]+, [^, ]+) at ([^,]+),.+/date --date "\1 \2"/' | sh | sed -r 's/^.+$/date "+\%FT\%TZ" --utc --date "\0"/' | sh
  " Date is always 20 characters long.
  let padding                =  repeat(" ", 64 - 20 - strlen(text[1]))
  s/^/\= text[1] . padding /
endfunction

command! -nargs=+ -complete=custom,email:complete EMAIL
\ :silent! call email:dispatch("<args>")<CR>

function! email:complete(A,C,P)
  return join(keys(g:EMAIL), "\n")
endfunction

function! email:dispatch(which)
  call g:EMAIL[a:which]()
endfunction

let EMAIL =
\ { "wrote" : function("email:cure_google_date")
\ }




function! css:adjust_colon_and_semicolon()
  let text = matchlist(getline("."), '\v^[ ]+([^:]+):[ ]+([^;]+);(.*)$')
  if ! empty(text)
    let east_side            =  "; " . text[1]
    let west_side            =  text[2] . text[3]
    let dark_side            =  repeat(" ", 32 - 4 - strlen(east_side))
    call setline(".", east_side . dark_side . " :  " . west_side)
  endif
endfunction

command! -nargs=+ -complete=custom,css:complete CSS
\ :silent! call css:dispatch("<args>")<CR>

function! css:complete(A,C,P)
  return join(keys(g:CSS), "\n")
endfunction

function! css:dispatch(which)
  call g:CSS[a:which]()
endfunction

let CSS =
\ { "align" : function("css:adjust_colon_and_semicolon")
\ }




runtime macros/justify.vim
command Just :call Justify(&tw)<CR>

filetype plugin indent on

autocmd BufRead *.hsc setlocal filetype=haskell
autocmd BufEnter *.hs compiler ghc
autocmd BufEnter *.lhs compiler ghc
let g:haddock_browser = "/Applications/Firefox.app/Contents/MacOS/firefox-bin"
let g:haddock_docdir         =  "/usr/share/doc/ghc/"
let g:haddock_indexfiledir   =  "/Users/Shared/.vim/"

autocmd BufRead *_mailbody_* setlocal filetype=messagebody
autocmd BufRead *.wiki setlocal filetype=wikipedia
autocmd BufRead www.tumblr.com_textpost* setlocal filetype=mkd

autocmd FileType ldif setlocal list
autocmd FileType messagebody setlocal textwidth=64 wrap
autocmd FileType mkd setlocal textwidth=78 wrap


" wikipedia is an annoying format
" i need to figure out some 1337 h4x for it
autocmd FileType wikipedia setlocal textwidth=78

if has("autocmd") && exists("+omnifunc")
  autocmd Filetype *
  \ if &omnifunc == "" |
  \   setlocal omnifunc=syntaxcomplete#Complete |
  \ endif
endif

" au FileType c setlocal tabstop=8 shiftwidth=8 noexpandtab
au FileType python setlocal softtabstop=4 tabstop=4 shiftwidth=4 expandtab

augroup mkd
  autocmd BufRead *.mkd  set ai formatoptions=tcroqn2 comments=n:>
augroup END

" annoying initial highlights removed
nohlsearch

